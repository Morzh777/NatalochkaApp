import { Injectable } from '@nestjs/common';

import { compatibilityMap } from '../data/compatibility-map';
import { CompatibilityResult, DestinyNumber } from '../types/types';

const flatMap: Map<string, CompatibilityResult> = new Map();

// ‚ö° –°–æ–∑–¥–∞—ë–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É 'min|max'
Object.entries(compatibilityMap).forEach(([a, sub]) => {
  Object.entries(sub).forEach(([b, result]) => {
    const min = Math.min(+a, +b);
    const max = Math.max(+a, +b);
    const key = `${min}|${max}`;
    flatMap.set(key, result);
  });
});

@Injectable()
export class CompatibilityService {
  getCompatibility(a: DestinyNumber, b: DestinyNumber): CompatibilityResult {
    const key = `${Math.min(a, b)}|${Math.max(a, b)}`;
    const result = flatMap.get(key);

    if (!result) {
      console.warn(`üõë –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –ø–∞—Ä [${a}, ${b}] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    return (
      result ?? {
        percentage: 0,
        description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.',
      }
    );
  }

  getBatchCompatibility(
    batch: Array<{ a: DestinyNumber; b: DestinyNumber }>,
  ): CompatibilityResult[] {
    return batch.map(({ a, b }) => this.getCompatibility(a, b));
  }
}
