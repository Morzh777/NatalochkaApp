import { Injectable } from '@nestjs/common';

import { descriptions } from '../data/descriptions';

@Injectable()
export class DescriptionService {
  private readonly categories: Record<string, string> = {
    '1': '–•–∞—Ä–∞–∫—Ç–µ—Ä',
    '2': '–≠–Ω–µ—Ä–≥–∏—è',
    '3': '–ò–Ω—Ç–µ—Ä–µ—Å',
    '4': '–ó–¥–æ—Ä–æ–≤—å–µ',
    '5': '–õ–æ–≥–∏–∫–∞',
    '6': '–¢—Ä—É–¥–æ–ª—é–±–∏–µ',
    '7': '–£–¥–∞—á–∞',
    '8': '–ó–∞–±–æ—Ç–∞',
    '9': '–ü–∞–º—è—Ç—å',
    '10': '–¶–µ–ª—å',
    '11': '–°–µ–º—å—è',
    '12': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
    '13': '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞',
    '14': '–§–∏–Ω–∞–Ω—Å—ã',
    '15': '–¢–∞–ª–∞–Ω—Ç',
    '16': '–°–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å',
    '17': '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å',
  };

  private readonly icons: Record<string, string> = {
    –•–∞—Ä–∞–∫—Ç–µ—Ä: 'üß†',
    –≠–Ω–µ—Ä–≥–∏—è: '‚ö°Ô∏è',
    –ò–Ω—Ç–µ—Ä–µ—Å: 'üéØ',
    –ó–¥–æ—Ä–æ–≤—å–µ: 'ü©∫',
    –õ–æ–≥–∏–∫–∞: 'üß†',
    –¢—Ä—É–¥–æ–ª—é–±–∏–µ: '‚öôÔ∏è',
    –£–¥–∞—á–∞: 'üçÄ',
    –ó–∞–±–æ—Ç–∞: 'üíó',
    –ü–∞–º—è—Ç—å: 'üß†',
    –¶–µ–ª—å: 'üéØ',
    –°–µ–º—å—è: 'üè°',
    –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: 'üß±',
    –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞: 'üìà',
    –§–∏–Ω–∞–Ω—Å—ã: 'üí∞',
    –¢–∞–ª–∞–Ω—Ç: 'üé≠',
    –°–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å: 'üî•',
    –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å: 'üïäÔ∏è',
  };

  public getFormattedDescription(key: string, square: Record<string, string>): string {
    const category = this.categories[key] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
    const value = square[key] || '-';
    const categoryDescriptions = descriptions[category];
    const icon = this.icons[category] || 'üî∏';

    if (!categoryDescriptions) {
      return `<b>${icon} ${category} (${value})</b>\n–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
    }

    let descriptionText = categoryDescriptions[value];

    if (!descriptionText) {
      // –ß–∏—Å–ª–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      const valueNum = Number(value);
      const availableNums = Object.keys(categoryDescriptions)
        .map(Number)
        .sort((a, b) => a - b);

      if (!isNaN(valueNum)) {
        let closest = null;
        for (const n of availableNums) {
          if (n <= valueNum) {
            closest = n;
          }
        }
        if (closest !== null) {
          descriptionText = categoryDescriptions[String(closest)];
        }
      }
    }

    if (!descriptionText) {
      descriptionText = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
    }

    return `<b>${icon} ${category} (${value})</b>\n${descriptionText}`;
  }
}
