// src/validation/schemas.ts
import { z } from "zod";

// üìò –û–±—â–∏–µ —Ç–∏–ø—ã
const DateString = z.string().regex(/^\d{2}\.\d{2}\.\d{4}$/, "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥.–º–º.–≥–≥–≥–≥");
const NonEmptyString = z.string().min(1);
const UserId = z.union([z.string(), z.number()]).transform((val) => String(val).trim());
const Name = z.string().min(1).max(50);

// üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const RegisterUserSchema = z.object({
    userId: UserId,
    name: Name,
    birthDate: DateString,
    mainCalculationId: z.number().int().nonnegative(),
});

// üìú –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á—ë—Ç–∞
export const AddHistorySchema = z.object({
    userId: UserId,
    calculationId: z.number().int().nonnegative(),
    name: Name,
});

// üìú –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
export const AddMatrixHistorySchema = z.object({
    userId: UserId,
    inputDate: DateString,
    name: Name,
    matrixId: z.number().int().optional(),
});

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã
export const SaveMatrixSchema = z.object({
    inputDate: DateString,
    file_id: NonEmptyString,
    matrix: z.record(z.any()),
    programs: z.array(z.object({
        key: z.string(),
        type: z.string(),
    })).optional(),
});

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const SaveCompatibilityMatrixSchema = z.object({
    mainBirthDate: DateString,
    inputDate: DateString,
    matrix: z.record(z.any()),
    file_id: NonEmptyString,
});

// üîé –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –¥–∞—Ç–µ
export const GetCalculationByDateSchema = z.object({
    inputDate: DateString,
});

// üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –¥–∞—Ç–µ
export const GetMatrixByDateSchema = z.object({
    userId: UserId,
    inputDate: DateString,
    name: Name,
});

// üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
export const PaginatedHistorySchema = z.object({
    userId: UserId,
    page: z.string().optional(),
    pageSize: z.string().optional(),
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const GetCompatibilityMatrixSchema = z.object({
    mainBirthDate: DateString,
    inputDate: DateString,
});

export const FindUserHistorySchema = z.object({
    userId: z.string().min(1),
    inputDate: z.string().regex(/^\d{2}\.\d{2}\.\d{4}$/, "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –¥–¥.–º–º.–≥–≥–≥–≥"),
    name: z.string().min(1).max(50),
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ getPremiumStatus
export const GetPremiumStatusQuerySchema = z.object({
    withDate: z.string().optional(),
});

// –°—Ö–µ–º–∞ –¥–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ savePremiumPayment
export const SavePremiumPaymentBodySchema = z.object({
    userId: z.union([z.string().min(1), z.number()]).transform(String),
    chargeId: z.string().min(1, "chargeId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
    amount: z.number().int().positive("amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"),
});