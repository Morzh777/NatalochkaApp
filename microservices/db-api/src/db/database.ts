import sqlite3 from "sqlite3";
import {open, Database} from "sqlite";
import path from "path";
import fs from "fs";

// ===============================
// üß† Singleton-–∏–Ω—Å—Ç–∞–Ω—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// ===============================
let db: Database<sqlite3.Database, sqlite3.Statement> | null = null;

/**
 * üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite-–±–∞–∑–µ.
 * –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.
 */
export async function getDB(): Promise<Database<sqlite3.Database, sqlite3.Statement>> {
    if (!db) {
        const dbPath = path.resolve("data", "bot-data.db");
        console.log("üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", dbPath);
        const dbDir = path.dirname(dbPath);

        // üìÇ –°–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        console.log(`INFO: [db-api] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dbDir}`);
        if (!fs.existsSync(dbDir)) {
            console.log(`INFO: [db-api] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dbDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é.`);
            fs.mkdirSync(dbDir, {recursive: true});
            console.log(`INFO: [db-api] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dbDir} —Å–æ–∑–¥–∞–Ω–∞.`);
        }

        console.log("INFO: [db-api] –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
        db = await open({filename: dbPath, driver: sqlite3.Database});
        console.log("INFO: [db-api] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PRAGMA...");
        await db.exec("PRAGMA foreign_keys = ON"); // ‚úÖ —ç—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        await db.exec("PRAGMA journal_mode = WAL;");
        await db.exec("PRAGMA synchronous = NORMAL;");
        console.log("INFO: [db-api] PRAGMA –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...");

        // üë§ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'users'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS users
            (
                user_id             TEXT PRIMARY KEY,
                name                TEXT,
                birth_date          TEXT,
                main_calculation_id INTEGER,
                is_active           INTEGER  NOT NULL DEFAULT 1,
                joined_at           DATETIME NOT NULL DEFAULT (DATETIME('now'))
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞.");

        // üßÆ –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ (–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞)
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'calculations'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS calculations
            (
                id         INTEGER PRIMARY KEY AUTOINCREMENT,
                input_date TEXT     NOT NULL UNIQUE,
                square     TEXT     NOT NULL, -- JSON —Å—Ç—Ä–æ–∫–∞
                file_id    TEXT     NOT NULL,
                created_at DATETIME NOT NULL DEFAULT (DATETIME('now'))
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'calculations' —Å–æ–∑–¥–∞–Ω–∞.");

        // üîÆ –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç—Ä–∏—Ü —Å—É–¥—å–±—ã
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'destiny_matrices'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS destiny_matrices
            (
                id         INTEGER PRIMARY KEY AUTOINCREMENT,
                input_date TEXT     NOT NULL UNIQUE,
                matrix     TEXT     NOT NULL, -- JSON —Å—Ç—Ä–æ–∫–∞
                file_id    TEXT     NOT NULL,
                programs   TEXT,              -- JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
                created_at DATETIME NOT NULL DEFAULT (DATETIME('now'))
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'destiny_matrices' —Å–æ–∑–¥–∞–Ω–∞.");

        // üïì –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'user_history'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS user_history
            (
                user_id        TEXT     NOT NULL,
                calculation_id INTEGER  NOT NULL,
                name           TEXT     NOT NULL, -- —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                name_hash      TEXT     NOT NULL, -- —Ö—ç—à –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
                created_at     DATETIME NOT NULL DEFAULT (DATETIME('now')),
                UNIQUE (user_id, calculation_id, name)
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'user_history' —Å–æ–∑–¥–∞–Ω–∞.");

        // üßæ –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—Ä–∏—Ü —Å—É–¥—å–±—ã
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'matrix_history'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS matrix_history
            (
                id         INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id    TEXT     NOT NULL,
                input_date TEXT     NOT NULL,
                name       TEXT     NOT NULL,
                name_hash  TEXT     NOT NULL, -- —Ö—ç—à –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
                matrix_id  INTEGER,           -- –º–æ–∂–µ—Ç –±—ã—Ç—å NULL, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ –µ—â—ë –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞
                created_at DATETIME NOT NULL DEFAULT (DATETIME('now')),
                UNIQUE (user_id, input_date, name)
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'matrix_history' —Å–æ–∑–¥–∞–Ω–∞.");

        // üíé –¢–∞–±–ª–∏—Ü–∞ Premium-–ø–æ–¥–ø–∏—Å–æ–∫
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'premium_access'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS premium_access
            (
                user_id      TEXT     NOT NULL,
                charge_id    TEXT     NOT NULL,
                amount       INTEGER  NOT NULL,
                purchased_at DATETIME NOT NULL DEFAULT (DATETIME('now')),
                PRIMARY KEY (user_id, charge_id)
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'premium_access' —Å–æ–∑–¥–∞–Ω–∞.");

        // üíé –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç—Ä–∏—Ü —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'compatibility_matrices'...");
        await db.exec(`
            CREATE TABLE IF NOT EXISTS compatibility_matrices
            (
                id              INTEGER PRIMARY KEY AUTOINCREMENT,
                main_birth_date TEXT     NOT NULL,
                input_date      TEXT     NOT NULL,
                matrix          TEXT     NOT NULL,
                file_id         TEXT,
                created_at      DATETIME NOT NULL DEFAULT (DATETIME('now')),
                UNIQUE (main_birth_date, input_date)
            );
        `);
        console.log("INFO: [db-api] –¢–∞–±–ª–∏—Ü–∞ 'compatibility_matrices' —Å–æ–∑–¥–∞–Ω–∞.");

        // üî• –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log("INFO: [db-api] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
        await db.exec(`
            CREATE INDEX IF NOT EXISTS idx_user_history_user_id ON user_history (user_id);
            CREATE INDEX IF NOT EXISTS idx_user_history_calculation_id ON user_history (calculation_id);
            CREATE INDEX IF NOT EXISTS idx_user_history_created_at ON user_history (created_at);

            CREATE UNIQUE INDEX IF NOT EXISTS idx_calculations_input_date ON calculations (input_date);
            CREATE INDEX IF NOT EXISTS idx_calculations_created_at ON calculations (created_at);

            CREATE INDEX IF NOT EXISTS idx_matrix_history_user_id ON matrix_history (user_id);
            CREATE INDEX IF NOT EXISTS idx_matrix_history_input_date ON matrix_history (input_date);
            CREATE INDEX IF NOT EXISTS idx_matrix_history_created_at ON matrix_history (created_at);
        `);
        console.log("INFO: [db-api] –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã.");

    }
    return db;
}

/**
 * üîí –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
 */
export async function closeDB(): Promise<void> {
    if (db) {
        await db.close();
        db = null;
    }
}

// üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT (Ctrl + C) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
process.on("SIGINT", async () => {
    console.log("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
    await closeDB();
    process.exit(0);
});
