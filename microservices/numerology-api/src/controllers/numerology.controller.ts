import { Request, Response, NextFunction } from "express";
import {calculateCompatibilityMatrix, calculateMatrix, NumerologyService} from "../services/numerology.service";

import path from "path";
import fs from "fs";
import {ImageHelper} from "../services/ImageHelper";
import {MatrixImageHelper} from "../services/MatrixImageHelper";
import {
    findAllValidPrograms,
    ProgramKey,
    programLines
} from "../services/ProgramLineService";
import {programKeys} from "../services/programKeys";
import {MatrixResult} from "../types/descriptions";


/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 *
 * –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –º–µ—Ç–æ–¥ ‚Äî `calculateWithImage`,
 * –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
 */
type ProgramItem = {
    key: ProgramKey;
    type: "–æ–±—ã—á–Ω–∞—è" | "–∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è";
    title: string;
};
export class NumerologyController {
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ `/calculate`.
     *
     * üßÆ –õ–æ–≥–∏–∫–∞:
     * - –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
     * - –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á—ë—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ (–º–∞—Ç—Ä–∏—Ü—ã)
     * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–π –º–∞—Ç—Ä–∏—Ü—ã
     * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PNG –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     *
     * üì• –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
     * ```json
     * {
     *   "birthDate": "21.03.1990"
     * }
     * ```
     *
     * üì§ –û—Ç–≤–µ—Ç:
     * - `200 OK` —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º PNG (image/png)
     * - `400 Bad Request`, –µ—Å–ª–∏ `birthDate` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     * - `500 Internal Server Error`, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
     *
     * @param req - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ Express, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–ª–µ `birthDate` –≤ —Ç–µ–ª–µ
     * @param res - –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ Express, –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     * @param next - Middleware —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */

    public async calculateWithImage(
        req: Request,
        res: Response,
        next: NextFunction
    ): Promise<void> {
        try {
            const { birthDate, skipImage } = req.body;

            if (!birthDate) {
                res.status(400).json({ error: "birthDate is required" });
                return;
            }

            const square = NumerologyService.calculatePythagoreanSquare(birthDate);

            if (skipImage) {
                // ‚ö†Ô∏è –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ square ‚Äî –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                res.json({ square });
                return;
            }

            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PNG
            const filename = `square_${Date.now()}.png`;
            const tmpPath = path.join(process.cwd(), "tmp", filename);

            await ImageHelper.generateImage(square, birthDate, tmpPath);

            res.setHeader("Content-Type", "image/png");
            const stream = fs.createReadStream(tmpPath);
            stream.pipe(res);
            stream.on("end", () => fs.unlink(tmpPath, () => {}));
        } catch (error) {
            next(error);
        }
    }
    public  async calculateWithJson(
        req: Request,
        res: Response,
        next: NextFunction
    ): Promise<void> {
        try {
            const { birthDate } = req.body;

            if (!birthDate) {
                res.status(400).json({ error: "birthDate is required" });
                return;
            }

            const square = NumerologyService.calculatePythagoreanSquare(birthDate);
            const base64 = await ImageHelper.generateBase64Image(square, birthDate);

            res.json({
                square,
                image: `data:image/png;base64,${base64}`
            });
        } catch (error) {
            next(error);
        }
    }


    public async calculateMatrixJson(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const { birthDate } = req.body;

            if (!birthDate) {
                res.status(400).json({ error: "birthDate is required" });
                return;
            }

            const matrix = calculateMatrix(birthDate);
            const base64 = await MatrixImageHelper.generateMatrixBase64Image(matrix, birthDate);

            // üîê –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è keyMap
            const keyMap: Record<ProgramKey, ProgramItem[]> = {};

            for (const item of programKeys) {
                const trimmedKey = item.key.trim();

                if (/^\d{1,2}-\d{1,2}-\d{1,2}$/.test(trimmedKey)) {
                    const key = trimmedKey as ProgramKey;

                    if (!keyMap[key]) keyMap[key] = [];

                    const alreadyExists = keyMap[key].some(p => p.type === item.type);
                    if (!alreadyExists) {
                        keyMap[key].push({
                            key,
                            type: item.type === "–∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è" ? "–∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è" : "–æ–±—ã—á–Ω–∞—è",
                            title: item.title,
                        });
                    }
                }
            }

            // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            const programs = findAllValidPrograms(matrix, programLines, keyMap);

            console.log("üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:", programs);
            console.log("üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:", matrix);

            res.json({
                matrix,
                image: `data:image/png;base64,${base64}`,
                programs,
            });

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ calculateMatrixJson:", error);
            next(error);
        }
    }
}
export async function calculateCompatibilityHandler(req: Request, res: Response): Promise<void> {
    const { birthDate, mainBirthDate } = req.body;

    if (!birthDate || !mainBirthDate) {
        res.status(400).json({ error: "birthDate and mainBirthDate are required" });
        return;
    }

    try {
        const matrixA = calculateMatrix(mainBirthDate);
        const matrixB = calculateMatrix(birthDate);

        const result = calculateCompatibilityMatrix(matrixA, matrixB);

        const filename = `tmp_${Date.now()}.png`;
        const tmpPath = path.join(process.cwd(), "tmp", filename);

        // üëá –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
        await MatrixImageHelper.generateMatrixImage(result as MatrixResult, birthDate, tmpPath);

        const base64 = fs.readFileSync(tmpPath, { encoding: "base64" });
        fs.unlinkSync(tmpPath);

        res.json({
            matrix: result,
            image: `data:image/png;base64,${base64}`,
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:", err);
        res.status(500).json({ error: "Internal server error" });
    }
}

export const numerologyController = new NumerologyController();