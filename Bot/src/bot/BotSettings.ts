import { Bot, Context, MemorySessionStorage, session, SessionFlavor } from 'grammy';
import { settings } from '../config/settings.js';
import { SessionData } from '../types/SessionData.js';

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏—è–º–∏.
 */

export type BotContext = Context & SessionFlavor<SessionData>;

/**
 * Singleton-–∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–º.
 */
export class BotSettings {
  private static instance: BotSettings;
  private bot: Bot<BotContext>;

  private constructor() {
    this.bot = new Bot<BotContext>(settings.botToken);

    // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏
    this.bot.use(
      session({
        storage: new MemorySessionStorage(),
        initial: (): SessionData => ({
          state: 'start',
          messageIds: [],
          historyTotalCount: 0,
        }),
      }),
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (Singleton).
   */
  public static getInstance(): BotSettings {
    if (!BotSettings.instance) {
      BotSettings.instance = new BotSettings();
    }
    return BotSettings.instance;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
   */
  public getBot(): Bot<BotContext> {
    return this.bot;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
   */
  public async registerCommands() {
    console.log('üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥...');
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const publicCommands = [
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' },
    ];

    // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCommands: any[] = [];

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await this.bot.api.setMyCommands(publicCommands);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for (const adminId of settings.adminIds) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      const combinedCommands = [...publicCommands, ...adminCommands];
      await this.bot.api.setMyCommands(combinedCommands, {
        scope: { type: "chat", chat_id: adminId }
      });
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
   */
  public async start(): Promise<void> {
    console.log('üü° –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...');
    try {
      await this.registerCommands();
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');

      console.log('‚è≥ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
      await this.bot.start({
        onStart: () => console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–µ—Ä—Å–∏—è: ${settings.botVersion}`),
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    }
  }
}
