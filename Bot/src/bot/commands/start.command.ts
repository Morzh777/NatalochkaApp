import { Bot } from "grammy";
import axios from "axios";
import { BotContext } from "../BotSettings.js";
import { deleteAllBotMessages } from "../../utils/messageUtils.js";
import { API_BASE_URL } from "../../config/api.js";
import { ImageService } from "../../services/ImageService.js";
import { UserRegistrationService } from "../../services/UserRegistrationService.js";
import { Logger } from "../../utils/Logger.js";
import {showMainMenu} from "../../utils/menu.js";

// ==============================
// üì¶ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã SRP
// ==============================

const COMMAND_START = "start";
const PHOTO_KEY_WELCOME = "welcome";

// API
const api = {
    getUser: (id: string) => `${API_BASE_URL}/users/${id}`,
};

// –ª–æ–≥-–∫–æ–Ω—Ç–µ–∫—Å—Ç
const LOG_CTX_START = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start";
const logger = new Logger("Start");

const MSG_WELCOME = `
üëã <b>–ü—Ä–∏–≤–µ—Ç, —è –ù–∞—Ç–∞–ª–æ—á–∫–∞</b>! üåü

–•–æ—á–µ—à—å <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ—é <b>–º–∞—Ç—Ä–∏—Ü—É –ü–∏—Ñ–∞–≥–æ—Ä–∞</b>?

–¢—ã —É–∑–Ω–∞–µ—à—å:
üî¢ –ö–∞–∫–∏–µ —á–∏—Å–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Ç–∞–ª–∞–Ω—Ç—ã  
üíû –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º(–∞) —Å –¥—Ä—É–≥–∏–º–∏  
üîÆ –ò –ø–æ–ª—É—á–∏—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é

–ê –µ—â—ë —è —É–º–µ—é:  
‚ú® –°—Ç—Ä–æ–∏—Ç—å <b>–º–∞—Ç—Ä–∏—Ü—É —Å—É–¥—å–±—ã</b>  
‚ù§Ô∏è –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å <b>—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã</b> –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üìå <b>–ù–∞—á–Ω—ë–º —Å —Ç–≤–æ–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è</b> ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã ‚è≥
`.trim();

// ==============================
// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
// ==============================
export function registerStartCommand(bot: Bot<BotContext>) {
    bot.command(COMMAND_START, async (ctx) => {
        if (!ctx.from) return;

        await deleteAllBotMessages(ctx);

        try {
            const res = await axios.get(api.getUser(String(ctx.from.id)));
            const user = res.data;

            if (user && user.main_calculation_id) {
                return await showMainMenu(ctx, user.name);
            }
        } catch (error) {
            logger.logError(LOG_CTX_START, error);
        }

        const message = await ImageService.replyWithPhoto(ctx, PHOTO_KEY_WELCOME, {
            caption: MSG_WELCOME,
            parse_mode: "HTML",
        });

        ctx.session.botMessageId = message.message_id;
        ctx.session.messageIds ||= [];
        ctx.session.messageIds.push(message.message_id);

        await UserRegistrationService.start(ctx);
    });
}
