import { Bot, Context, InlineKeyboard } from "grammy";
import { UserService } from "../../services/UserService.js";
import { ImageService } from "../../services/ImageService.js";
import { Logger } from "../../utils/Logger.js";
import { settings } from "../../config/settings.js";
import { BotContext } from "../BotSettings.js";

const logger = new Logger("AdminCommands");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId: number): boolean {
    return settings.adminIds.includes(userId);
}

// –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–∞—è –∫–∞–ø—á–∞
const CAPTCHA_TEXT_PROMO = `üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>

üß¨ <b>–ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,  
–≤–ª–∏—è—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–∫—Ä—ã—Ç—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.

üéØ <b>–¶–µ–ª—å –∏ –ø—É—Ç—å:</b>  
‚Ä¢ –ß—Ç–æ —Ç–≤–æ—è –¥—É—à–∞ —Ö–æ—á–µ—Ç –ø—Ä–æ–π—Ç–∏  
‚Ä¢ –ö–∞–∫ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã –∏ —Ä–∞–±–æ—Ç–∞:</b>  
‚Ä¢ –ì–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–Ω—å–≥–∏  
‚Ä¢ –ö–∞–∫ –Ω–∞–π—Ç–∏ –¥–µ–ª–æ –ø–æ –¥—É—à–µ –∏ –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

üíû <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b>  
‚Ä¢ –ü–æ—á–µ–º—É –≤–∞—Å —Ç—è–Ω–µ—Ç ‚Äî –∏–ª–∏ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç  
‚Ä¢ –ß—Ç–æ –º–µ—à–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö  
‚Ä¢ –ö–∞–∫ —Å—Ç–∞—Ç—å –±–ª–∏–∂–µ –∏ –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

‚≠ê <b>–ö—É–ø–∏ –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–æ –∑–∞ 99 –∑–≤—ë–∑–¥(üíµ 179 —Ä—É–±–ª–µ–π )  </b> ‚Äî –∏ —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç—Ç–∏–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º.`;

const CAPTCHA_TEXT = `üì¢ <b>–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ù–∞—Ç–∞–ª–æ—á–∫–∏!</b>

–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö.

üí¨ <b>Telegram-–≥—Ä—É–ø–ø–∞</b>  
–ú—ã –ø—É–±–ª–∏–∫—É–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞,  
–¥–∞—Ä–∏–º <b>–ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç—É–ø</b> –∏ –¥–µ–ª–∏–º—Å—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

üì∞ <b>–ö–∞–Ω–∞–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω</b>  
–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã, –æ–±—ä—è—Å–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫  
–∏ –ø—É–±–ª–∏–∫—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–±–æ—Ä—ã.

–≠—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º:  
‚Ä¢ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏  
‚Ä¢ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª  
‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–∏–Ω–æ–∫, –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –Ω–∞ 100%.`;

export const promoKeyboard = new InlineKeyboard()
    .url("üì¢ –ö–∞–Ω–∞–ª –Ω–∞ –î–∑–µ–Ω", "https://dzen.ru/asknatalochka")
    .url("üí¨ –ì—Ä—É–ø–ø–∞ –≤ Telegram", "https://t.me/natalochka_news")
    .text("–¢–≤–æ—è –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", "matrix_menu");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export function registerAdminCommands(bot: Bot<BotContext>) {
    bot.callbackQuery("send_news_admin", async (ctx) => {
        if (!ctx.from || !isAdmin(ctx.from.id) || !ctx.chat) {
            await ctx.answerCallbackQuery();
            return;
        }

        await ctx.answerCallbackQuery("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...");

        try {
            const users = await UserService.getAllActiveUsers();
            const totalUsers = users.length;

            if (totalUsers === 0) {
                await ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
                return;
            }

            await ctx.reply(`üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É ${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...`);

            let successCount = 0;
            let failCount = 0;
            let currentCount = 0;

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            (async () => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                const sendPromises = users.map(async (user) => {
                    try {
                        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const userCtx = {
                            ...ctx,
                            from: { id: user.id },
                            chat: { id: user.id },
                            reply: ctx.api.sendMessage.bind(ctx.api, user.id),
                            replyWithPhoto: ctx.api.sendPhoto.bind(ctx.api, user.id),
                            session: ctx.session
                        } as BotContext;

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                        await ImageService.replyWithPhoto(userCtx, "captcha", {
                            caption: CAPTCHA_TEXT,
                            parse_mode: "HTML",
                            reply_markup: promoKeyboard,
                        });

                        successCount++;
                        currentCount++;

                        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                        return { success: true, userId: user.id };
                    } catch (error: any) {
                        failCount++;
                        logger.logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`, error);
                        return { success: false, userId: user.id };
                    }
                });

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
                await Promise.all(sendPromises);

                await ctx.reply(
                    `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
                    `üìä –ò—Ç–æ–≥–∏:\n` +
                    `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
                    `‚ùå –û—à–∏–±–æ–∫: ${failCount}\n` +
                    `üìù –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${totalUsers}`,
                    { reply_markup: new InlineKeyboard().text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu") }
                );
            })().catch(error => {
                logger.logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ", error);
                ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.");
            });

        } catch (error) {
            logger.logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", error);
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.");
        }
    });
}