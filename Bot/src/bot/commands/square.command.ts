import { Bot } from "grammy";
import axios from "axios";
import { BotContext } from "../BotSettings.js";
import { deleteAllBotMessages } from "../../utils/messageUtils.js";
import { CalculationService } from "../../services/CalculationService.js";
import { API_BASE_URL } from "../../config/api.js";
import { Flow } from "../../types/Flow.js";
import { AppKeyboard } from "../../utils/keyboards.js";
import { Logger } from "../../utils/Logger.js";
import {getMatrixCaption} from "../../utils/captionUtils.js";
import {checkPremiumAccess} from "../../utils/checkPremiumAccess.js";
import {trackButtonClick} from "../../utils/trackButtonClick.js";
import {LoadingService} from "../../services/LoadingService.js";

// ==============================
// üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SRP
// ==============================

const DEFAULT_USER_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

// parse mod
const PARSE_MODE_HTML = "HTML";

// callbacks
const CALLBACK_SQUARE = "square";
const CALLBACK_MAIN_CALC = "main_calculation";

// —Å–æ–æ–±—â–µ–Ω–∏—è
const MSG_MAIN_CALC_NOT_FOUND = "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.";
const MSG_CALC_LOAD_FAIL = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—á—ë—Ç.";
const MSG_FALLBACK = "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ–π —Ä–∞—Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";

// –ª–æ–≥-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
const LOG_CTX_MAIN_CALC = "–ø–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞";

// API
const api = {
    getUser: (id: string) => `${API_BASE_URL}/users/${id}`,
    getCalculation: (id: string) => `${API_BASE_URL}/calculation/${id}`,
};

// –ª–æ–≥–≥–µ—Ä
const logger = new Logger(CALLBACK_SQUARE);

// ==============================
// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
// ==============================
export function registerSquareCommand(bot: Bot<BotContext>) {
    async function squareFlow(ctx: BotContext) {
        await deleteAllBotMessages(ctx);
        await CalculationService.start(ctx);
    }

    bot.command(CALLBACK_SQUARE, async (ctx) => {
        if (!ctx.from) return;
        await squareFlow(ctx);
    });

    bot.callbackQuery(CALLBACK_SQUARE, async (ctx) => {
        await ctx.answerCallbackQuery();
        await deleteAllBotMessages(ctx);
        await squareFlow(ctx);
    });

    bot.callbackQuery(CALLBACK_MAIN_CALC, async (ctx) => {
        void ctx.answerCallbackQuery();

        setTimeout(async () => {
            trackButtonClick(CALLBACK_MAIN_CALC);
            if (!ctx.from) return;

            let loader: LoadingService | null = null;

            try {
                // üåÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
                loader = await LoadingService.create(ctx, 10);

                // üîÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∫–µ—à–∞
                const res = await axios.get(api.getUser(String(ctx.from.id)));
                const user = res.data;

                if (!user?.main_calculation_id) {
                    await loader.stop();
                    return void ctx.reply(MSG_MAIN_CALC_NOT_FOUND);
                }

                // üîÑ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á—ë—Ç –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∫–µ—à–∞
                const calcRes = await axios.get(api.getCalculation(String(user.main_calculation_id)));
                const calculation = calcRes.data;

                if (!calculation?.square) {
                    await loader.stop();
                    return void ctx.reply(MSG_CALC_LOAD_FAIL);
                }

                const { square, file_id: photo, input_date: inputDate } = calculation;
                const name = user.name ?? DEFAULT_USER_NAME;

                ctx.session.square = square;
                ctx.session.flow = Flow.MainCalculation;
                ctx.session.openedFromHistory = false;

                // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç
                setTimeout(() => deleteAllBotMessages(ctx), 0);

                const caption = getMatrixCaption(name, inputDate);
                const hasPremium = await checkPremiumAccess(ctx);

                await loader.stop(); // üßπ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä

                const msg = await ctx.replyWithPhoto(photo, {
                    caption,
                    parse_mode: PARSE_MODE_HTML,
                    reply_markup: AppKeyboard.detailKeyboard({
                        square,
                        openedFromHistory: false,
                        showNewCalc: true,
                        hasPremium,
                    }),
                });

                ctx.session.messageIds ||= [];
                ctx.session.messageIds.push(msg.message_id);

            } catch (err) {
                logger.logError(LOG_CTX_MAIN_CALC, err);

                if (loader) await loader.stop();

                const fallback = await ctx.reply(MSG_FALLBACK);
                ctx.session.messageIds ||= [];
                ctx.session.messageIds.push(fallback.message_id);
            }
        }, 0);
    });



}
