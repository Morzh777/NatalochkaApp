import { Bot } from "grammy";
import { BotContext } from "../BotSettings.js";
import { Logger } from "../../utils/Logger.js";
import { DateSelectorService } from "../../services/DateSelectorService.js";
import { PaymentService } from "../../services/PaymentService.js";
import { Flow } from "../../types/Flow.js";

const EVENT_TEXT_MESSAGE = "message:text";
const LOG_CTX_DELETE_PROMPT = "—É–¥–∞–ª–µ–Ω–∏–µ prompt-—Å–æ–æ–±—â–µ–Ω–∏—è";
const logger = new Logger("Fallback");

export function registerFallbacks(bot: Bot<BotContext>) {
    bot.on(EVENT_TEXT_MESSAGE, async (ctx) => {
        if (!ctx.message || !ctx.message.text) return;

        const text = ctx.message.text.trim();
        logger.logInfo(`Fallback handler received message: "${text}". Current session state: ${ctx.session.state}`);

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '/'
        if (text.startsWith('/')) {
            logger.logInfo(`Ignoring command: ${text}`);
            return;
        }

        // üîÅ –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º charge_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        if (ctx.session.flow === Flow.awaitRefundChargeId) {
            ctx.session.flow = undefined;

            const chargeId = text;
            const userId = 69884361;

            await ctx.reply("‚è≥ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç...");
            await PaymentService.refund(ctx, chargeId, userId);

            return;
        }

        // üîí –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
        if (ctx.session.flow === Flow.buy) {
            if (!text.startsWith("/")) {
                await ctx.deleteMessage();
                await ctx.reply("üí≥ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /buy");
                return;
            }
            return;
        }

        // üí¨ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.deleteMessage();

        if (ctx.session.botMessageId) {
            try {
                await ctx.api.deleteMessage(ctx.chat.id, ctx.session.botMessageId);
            } catch (e) {
                logger.logError(LOG_CTX_DELETE_PROMPT, e);
            }
            ctx.session.botMessageId = undefined;
        }

        // üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
        await DateSelectorService.processState(ctx, text);
    });
}