import {Bot, InlineKeyboard} from "grammy";
import axios from "axios";
import {API_BASE_URL} from "../../config/api.js";
import {deleteAllBotMessages, deleteMessage} from "../../utils/messageUtils.js";
import {BotContext} from "../BotSettings.js";
import {ImageService} from "../../services/ImageService.js";
import {AppKeyboard} from "../../utils/keyboards.js";
import {SessionService} from "../../services/SessionService.js";
import {Flow} from "../../types/Flow.js";
import {DateSelectorService} from "../../services/DateSelectorService.js";
import {Logger} from "../../utils/Logger.js";
import { settings } from "../../config/settings.js"; // Import settings

// ==============================
// üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SRP
// ==============================

// parse mod
const PARSE_MODE_HTML = "HTML";

// callbacks
const CALLBACK_SETTINGS = "settings";
const CALLBACK_EDIT_NAME = "edit_name";
const CALLBACK_EDIT_DATE = "edit_date";

// —Å–æ—Å—Ç–æ—è–Ω–∏—è
const SESSION_STATE_PROFILE = "name"

// –ª–æ–≥-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
const LOG_CTX_LOAD_PROFILE = "–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è";
const LOG_CTX_DELETE_LOADING_MSG = "—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏";

// —Å–æ–æ–±—â–µ–Ω–∏—è
const MSG_PROFILE_NOT_FOUND = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.";
const MSG_PROFILE_LOAD_FAIL = "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";
const MSG_ASK_NEW_NAME = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):";

// –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const PHOTO_KEY_SETTINGS = "settings";

// API
const api = {
    getUser: (id: string) => `${API_BASE_URL}/users/${id}`,
    deleteUser: (id: string) => `${API_BASE_URL}/users/${id}`,
};

// –ª–æ–≥–≥–µ—Ä
const logger = new Logger("Profile");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–¥–µ—Å—å)
function isAdmin(userId: number): boolean {
    return settings.adminIds.includes(userId);
}

// ==============================
// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
// ==============================
export function registerProfileCommand(bot: Bot<BotContext>) {
    bot.callbackQuery(CALLBACK_SETTINGS, async (ctx) => {
        if (!ctx.from) return;

        await deleteAllBotMessages(ctx);

        try {
            const userId = String(ctx.from.id);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const res = await axios.get(api.getUser(userId));
            const user = res.data;

            if (!user || !user.name || !user.birth_date) {
                return ctx.answerCallbackQuery({text: MSG_PROFILE_NOT_FOUND});
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
            let premiumText = "üö´ <b>–ü—Ä–µ–º–∏—É–º:</b> –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω";
            try {
                const {data: premium} = await axios.get<{ isActive: boolean; expiresAt?: string }>(
                    `${API_BASE_URL}/premium/${userId}?withDate=true`
                );

                if (premium.isActive) {
                    premiumText = `üåü <b>–ü—Ä–µ–º–∏—É–º:</b> –∞–∫—Ç–∏–≤–µ–Ω`;

                    if (premium.expiresAt) {
                        const now = new Date();
                        const expires = new Date(premium.expiresAt);
                        const diff = Math.ceil((expires.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
                        premiumText += `\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>${diff}</b>`;
                    }
                }
            } catch (e) {
                const err = e as Error;
                console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º:", err.message);
            }

            const messageText =
                `üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
                `üßç‚Äç‚ôÇÔ∏è <b>–ò–º—è:</b> ${user.name}\n` +
                `üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${user.birth_date}\n\n` +
                `${premiumText}`;

            const msg = await ImageService.replyWithPhoto(ctx, PHOTO_KEY_SETTINGS, {
                caption: messageText,
                parse_mode: PARSE_MODE_HTML,
                reply_markup: isAdmin(ctx.from.id) ? AppKeyboard.getAdminMenuKeyboard() : AppKeyboard.getUserMenuKeyboard(),
            });

            ctx.session.messageIds = [...(ctx.session.messageIds || []), msg.message_id];

            await ctx.answerCallbackQuery();
        } catch (error) {
            logger.logError(LOG_CTX_LOAD_PROFILE, error);

            const errMsg = await ctx.reply(MSG_PROFILE_LOAD_FAIL);
            ctx.session.messageIds = [...(ctx.session.messageIds || []), errMsg.message_id];
        }
    });

    bot.callbackQuery(CALLBACK_EDIT_NAME, async (ctx) => {
        ctx.session.flow = Flow.EditProfile;
        ctx.session.state = SESSION_STATE_PROFILE;

        await deleteAllBotMessages(ctx);

        const askNameMsg = await ctx.reply(MSG_ASK_NEW_NAME, {
            reply_markup: {remove_keyboard: true},
        });

        ctx.session.messageIds.push(askNameMsg.message_id);
    });

    bot.callbackQuery(CALLBACK_EDIT_DATE, async (ctx) => {
        const loadingMessageId = await SessionService.resetForFlow(ctx, Flow.EditProfile);

        await deleteAllBotMessages(ctx);

        await DateSelectorService.requestDay(ctx);

        if (loadingMessageId) {
            try {
                await ctx.api.deleteMessage(ctx.chat?.id!, loadingMessageId);
            } catch (e) {
                logger.logError(LOG_CTX_DELETE_LOADING_MSG, e);
            }
        }
    });
    bot.callbackQuery("delete_profile", async (ctx) => {
        if (!ctx.from) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
        const keyboard = new InlineKeyboard()
            .text("‚úÖ –î–∞", "confirm_delete")
            .text("‚ùå –ù–µ—Ç", "cancel_delete");

        const msg = await ctx.reply("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?", {
            reply_markup: keyboard,
        });

        ctx.session.messageIds = [...(ctx.session.messageIds || []), msg.message_id];
        await ctx.answerCallbackQuery();
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞"
    bot.callbackQuery("confirm_delete", async (ctx) => {
        if (!ctx.from) return;

        await deleteAllBotMessages(ctx);

        try {
            const userId = String(ctx.from.id);
            await axios.delete(api.deleteUser(userId));


            const msg = await ctx.reply("üóëÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start", {
            });

            ctx.session.messageIds = [...(ctx.session.messageIds || []), msg.message_id];
        } catch (error) {
            logger.logError("—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", error);
            const errMsg = await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            ctx.session.messageIds = [...(ctx.session.messageIds || []), errMsg.message_id];
        }

        await ctx.answerCallbackQuery();
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"

    bot.callbackQuery("cancel_delete", async (ctx) => {
        try {
            if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
                await deleteMessage(ctx, ctx.callbackQuery.message.message_id, "—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã");
            }
            await ctx.answerCallbackQuery();
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
        }
    });

}
