import { Bot, InlineKeyboard } from "grammy";
import axios from "axios";
import { BotContext } from "../BotSettings.js";
import { deleteAllBotMessages } from "../../utils/messageUtils.js";
import { API_BASE_URL } from "../../config/api.js";
import { ComparisonsItem, CompatibilityEntry } from "../../types/Compatibility.js";
import { AppKeyboard } from "../../utils/keyboards.js";
import { ImageService } from "../../services/ImageService.js";
import { Logger } from "../../utils/Logger.js";
import {checkPremiumAccess} from "../../utils/checkPremiumAccess.js";
import {trackButtonClick} from "../../utils/trackButtonClick.js";

// ==============================
// üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è SRP
// ==============================

// pagination
const PAGE_SIZE = 5;

const PHOTO_KEY_COMPATIBILITY = "compatibility";
// callbacks
const CALLBACK_MENU = "menu_compatibility";
const CALLBACK_PAGE = /^compatibility_page:(\d+)$/;
const CALLBACK_ITEM = /^show_compatibility:(.+)\|(.+)$/;

// –∫–Ω–æ–ø–∫–∏
const BUTTON_BACK_TEXT = "‚Ü©Ô∏è –ù–∞–∑–∞–¥";

// —Å–æ–æ–±—â–µ–Ω–∏—è
const MSG_NO_MAIN_CALC = "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π /square";
const MSG_NO_DESTINY = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã.";
const MSG_EMPTY_LIST = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /square";
const MSG_LOAD_ERROR = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.";
const MSG_ITEM_NOT_FOUND = "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
const MSG_FETCH_ERROR = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.";

// –ª–æ–≥-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
const LOG_CTX_ITEM = "–ø–æ–∫–∞–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏";
const LOG_CTX_PAGE = "–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏";

// —à–∞–±–ª–æ–Ω—ã UI
const ITEM_TEMPLATE = (match: ComparisonsItem) => `
üíë <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å ${match.name}</b>

üî¢ <b>–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã:</b> ${match.destiny}
üíØ <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> ${match.percentage}%

${match.description}
`.trim();

const CAPTION_TEMPLATE = (page: number, totalPages: number) => `
üíû <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —á–∏—Å–ª—É —Å—É–¥—å–±—ã!</b>

–ù–∏–∂–µ —Ç—ã —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, —á—å–∏ –º–∞—Ç—Ä–∏—Ü—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞ —Ç—ã —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª(–∞) üëá

–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
üë§ –ò–º—è —á–µ–ª–æ–≤–µ–∫–∞
üî¢ –ï–≥–æ <b>—á–∏—Å–ª–æ —Å—É–¥—å–±—ã</b>
üíØ <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b> —Å —Ç–æ–±–æ–π

–ù–∞–∂–º–∏ –Ω–∞ –∏–º—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚ú®


üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ <b>${totalPages}</b> —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ ${PAGE_SIZE} –∑–∞–ø–∏—Å–µ–π
`.trim();

// —Ä–æ—É—Ç—ã API
const api = {
    user: (id: string) => `${API_BASE_URL}/users/${id}`,
    userMainCalculation: (id: string) => `${API_BASE_URL}/calculation/${id}`,
    compatibilityHistory: () => `${API_BASE_URL}/compatibility/history`,
};

// –ª–æ–≥–≥–µ—Ä
const logger = new Logger("Compatibility");

// ==============================
// üìò –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// ==============================
export function registerCompatibilityCommand(bot: Bot<BotContext>) {
    bot.callbackQuery(CALLBACK_MENU, async (ctx) => {
        await ctx.answerCallbackQuery();
        trackButtonClick(CALLBACK_MENU)
        await deleteAllBotMessages(ctx);
        await showCompatibilityPage(ctx, 0);
    });

    bot.callbackQuery(CALLBACK_PAGE, async (ctx) => {
        const page = parseInt(ctx.match[1], 10);
        await ctx.answerCallbackQuery();
        await showCompatibilityPage(ctx, page);
    });

    bot.callbackQuery(CALLBACK_ITEM, async (ctx) => {
        const inputDate = ctx.match[1];
        const name = ctx.match[2];

        // üßπ –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–ª—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        const lastMessageId = ctx.session.compatibilityItemMessageId;
        if (lastMessageId) {
            try {
                await ctx.api.deleteMessage(ctx.chat!.id, lastMessageId);
            } catch (e) {
                console.warn(`‚ö†Ô∏è —Å–æ–æ–±—â–µ–Ω–∏–µ ${lastMessageId} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ`);
            }
        }

        try {
            const match = Object.values(ctx.session.compatibilityList ?? {})
                .flat()
                .find((c) => c.inputDate === inputDate && c.name === name);

            if (!match) {
                return await ctx.answerCallbackQuery({ text: MSG_ITEM_NOT_FOUND });
            }

            const message = ITEM_TEMPLATE(match);
            const keyboard = new InlineKeyboard().text(BUTTON_BACK_TEXT, CALLBACK_MENU);

            const sent = await ctx.reply(message, {
                parse_mode: "HTML",
                reply_markup: keyboard,
            });

            // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            ctx.session.compatibilityItemMessageId = sent.message_id;

            await ctx.answerCallbackQuery();
        } catch (error) {
            logger.logError(LOG_CTX_ITEM, error);
            await ctx.answerCallbackQuery({ text: MSG_FETCH_ERROR });
        }
    });
}

// ==============================
// üìò –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// ==============================
async function showCompatibilityPage(ctx: BotContext, page: number) {
    const startTotal = Date.now(); // üï∞Ô∏è —Å—Ç–∞—Ä—Ç –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    const userId = String(ctx.from!.id);

    try {
        if (!ctx.session.messageIds?.length) {
            await deleteAllBotMessages(ctx); // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
        }

        const startUser = Date.now();
        const { data: user } = await axios.get(api.user(userId));
        logger.logDebug("GET /user", `${Date.now() - startUser} ms`);

        if (!user.main_calculation_id) {
            const msg = await ctx.reply(MSG_NO_MAIN_CALC);
            ctx.session.messageIds.push(msg.message_id);
            return;
        }

        let userDestiny = ctx.session.userDestiny ?? -1;
        if (userDestiny === -1) {
            const startCalc = Date.now();
            const { data: calc } = await axios.get(api.userMainCalculation(user.main_calculation_id));
            logger.logDebug("GET /calculation", `${Date.now() - startCalc} ms`);

            userDestiny = Number(calc.square?.["18"]);
            if (isNaN(userDestiny)) {
                const msg = await ctx.reply(MSG_NO_DESTINY);
                ctx.session.messageIds.push(msg.message_id);
                return;
            }
            ctx.session.userDestiny = userDestiny;
        }

        const startHistory = Date.now();
        const { data } = await axios.get(api.compatibilityHistory(), {
            params: { userId, page, pageSize: PAGE_SIZE },
        });
        logger.logDebug("GET /compatibility/history", `${Date.now() - startHistory} ms`);

        const items = Array.isArray(data.items) ? data.items : [];
        const totalCount = typeof data.totalCount === "number" ? data.totalCount : 0;

        if (items.length === 0) {
            const msg = await ctx.reply(MSG_EMPTY_LIST);
            ctx.session.messageIds.push(msg.message_id);
            return;
        }

        const batchRequest = items.map((entry: CompatibilityEntry) => ({
            a: userDestiny,
            b: Number(entry.destiny),
        }));

        const startBatch = Date.now();
        const { data: compatibilities } = await axios.post(`${API_BASE_URL}/compatibility/batch`, {
            batch: batchRequest,
        });
        logger.logDebug("POST /compatibility/batch", `${Date.now() - startBatch} ms`);

        const results: ComparisonsItem[] = items.map((entry: CompatibilityEntry, index: number) => {
            const comp = compatibilities[index];
            return {
                calculationId: String(entry.calculationId),
                name: entry.name,
                inputDate: entry.inputDate,
                destiny: Number(entry.destiny),
                percentage: comp.percentage,
                description: comp.description ?? "",
            };
        });

        ctx.session.compatibilityList ??= {};
        ctx.session.compatibilityList[page] = results;
        ctx.session.compatibilityTotalCount = totalCount;

        const totalPages = Math.ceil(totalCount / PAGE_SIZE);
        const caption = CAPTION_TEMPLATE(page, totalPages);
        const hasPremium = await checkPremiumAccess(ctx);
        const keyboard = AppKeyboard.getCompatibilityKeyboard(
            results,
            page,
            PAGE_SIZE,
            totalCount,
            String(userDestiny),
            hasPremium,
        );

        const messageId = ctx.session.messageIds?.[0];

        if (!messageId) {
            // üì∏ –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É
            const msg = await ImageService.replyWithPhoto(ctx, PHOTO_KEY_COMPATIBILITY, {
                caption,
                parse_mode: "HTML",
                reply_markup: keyboard,
            });
            ctx.session.messageIds = [msg.message_id];
        } else {
            // üî• –ü—Ä–∏ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
            await ctx.api.editMessageReplyMarkup(ctx.chat!.id, messageId, {
                reply_markup: keyboard,
            });
        }

    } catch (error) {
        logger.logError(LOG_CTX_PAGE, error);
        const msg = await ctx.reply(MSG_LOAD_ERROR);
        ctx.session.messageIds = [msg.message_id];
    } finally {
        logger.logDebug("TOTAL showCompatibilityPage", `${Date.now() - startTotal} ms`);
    }
}

