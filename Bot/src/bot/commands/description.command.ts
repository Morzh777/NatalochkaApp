import {Bot} from "grammy";
import axios from "axios";
import {BotContext} from "../BotSettings.js";
import {AppKeyboard} from "../../utils/keyboards.js";
import {API_BASE_URL} from "../../config/api.js";
import {Logger} from "../../utils/Logger.js";
import {checkPremiumAccess} from "../../utils/checkPremiumAccess.js";
import {trackButtonClick} from "../../utils/trackButtonClick.js"; // üëà –ª–æ–≥–≥–µ—Ä

// ==============================
// üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SRP
// ==============================

// callbacks
const CALLBACK_SHOW_SQUARE = "show_square";
const CALLBACK_SHOW_AGGREGATES = "show_aggregates";
const CALLBACK_BACK_TO_MODE = "back_to_mode";

// —Å–æ–æ–±—â–µ–Ω–∏—è
const MSG_NO_DATA = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
const MSG_BACK_OPTION = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç";
const MSG_NOT_FOUND = "–û—à–∏–±–∫–∞: –ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!";
const MSG_DESCRIPTION_ERROR = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è";

// –ª–æ–≥-–∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
const LOG_CTX_DELETE_DESC = "—É–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è";
const LOG_CTX_LOAD_DESC = "–∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é —Ü–∏—Ñ—Ä—ã";

// API
const api = {
    getDescription: () => `${API_BASE_URL}/description`,
};

// –ª–æ–≥–≥–µ—Ä
const logger = new Logger("Description");

// ==============================
// üîÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
// ==============================
export function registerDescriptionCommand(bot: Bot<BotContext>) {
    bot.callbackQuery(CALLBACK_SHOW_SQUARE, async (ctx) => {
        trackButtonClick(CALLBACK_SHOW_SQUARE);
        if (!ctx.session.square) return ctx.answerCallbackQuery(MSG_NO_DATA);

        const keyboard = AppKeyboard.squareKeyboard(ctx.session.square, ctx.session.openedFromHistory);
        await ctx.editMessageReplyMarkup({reply_markup: keyboard});
        await ctx.answerCallbackQuery("–ü–æ–∫–∞–∑–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
    });

    bot.callbackQuery(CALLBACK_SHOW_AGGREGATES, async (ctx) => {
        trackButtonClick(CALLBACK_SHOW_AGGREGATES);

        if (!ctx.session.square) {
            return ctx.answerCallbackQuery(MSG_NO_DATA);
        }

        const hasPremium = await checkPremiumAccess(ctx); // ‚úÖ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞ –∏–∑ API –∏–ª–∏ —Å–µ—Å—Å–∏–∏

        const keyboard = AppKeyboard.aggregatesKeyboard(
            ctx.session.square,
            ctx.session.openedFromHistory,
            hasPremium
        );

        await ctx.editMessageReplyMarkup({ reply_markup: keyboard });
        await ctx.answerCallbackQuery("–ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è");
    });


    bot.callbackQuery(CALLBACK_BACK_TO_MODE, async (ctx) => {
        trackButtonClick(CALLBACK_BACK_TO_MODE);
        if (ctx.chat && ctx.session.lastDescriptionMessageId) {
            try {
                await ctx.api.deleteMessage(ctx.chat.id, ctx.session.lastDescriptionMessageId);
            } catch (error) {
                logger.logError(LOG_CTX_DELETE_DESC, error); // ‚úÖ –ª–æ–≥ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
            }
            ctx.session.lastDescriptionMessageId = undefined;
        }
        const hasPremium = await checkPremiumAccess(ctx);
        const keyboard = AppKeyboard.detailKeyboard({
            square: ctx.session.square,
            openedFromHistory: true,
            showNewCalc: false,
            hasPremium,
        });

        await ctx.editMessageReplyMarkup({reply_markup: keyboard});
        await ctx.answerCallbackQuery(MSG_BACK_OPTION);
    });

    bot.callbackQuery(/^show_user_destiny:(\d+)$/, async (ctx) => {
        const number = ctx.match?.[1];
        if (!number) return;
        try {
            const url = `${API_BASE_URL}/description/destiny/${number}`;
            console.log("üì° [BOT] –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã:", number);
            console.log("üîó [BOT] URL –∑–∞–ø—Ä–æ—Å–∞:", url);

            const { data } = await axios.get<{ title: string; description: string }>(url);

            console.log("‚úÖ [BOT] –û—Ç–≤–µ—Ç –æ—Ç description-api:", data);

            const message = `<b>${data.title}</b>\n\n${data.description}`;
            const keyboard = AppKeyboard.detailDestinyKeyboard();

            // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
            if (ctx.chat && ctx.session.lastDescriptionMessageId) {
                try {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.session.lastDescriptionMessageId);
                } catch (err) {
                    logger.logError(LOG_CTX_DELETE_DESC, err);
                }
            }

            const sentMessage = await ctx.reply(message, {
                parse_mode: "HTML",
                reply_markup: keyboard,
            });

            ctx.session.lastDescriptionMessageId = sentMessage.message_id;
            ctx.session.messageIds.push(sentMessage.message_id);

            await ctx.answerCallbackQuery();
        } catch (error) {
            logger.logError(LOG_CTX_LOAD_DESC, error);
            await ctx.answerCallbackQuery({ text: MSG_DESCRIPTION_ERROR });
        }
    });


    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ —Ü–∏—Ñ—Ä–∞–º === –í –°–ê–ú–´–ô –ö–û–ù–ï–¶ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!!!
    bot.callbackQuery(/^\d+$/, async (ctx) => {
        const digit = ctx.match![0]; // –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º

        if (!ctx.session.square) {
            await ctx.answerCallbackQuery({ text: MSG_NOT_FOUND });
            return;
        }

        // üßπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
        if (ctx.chat && ctx.session.lastDescriptionMessageId) {
            try {
                await ctx.api.deleteMessage(ctx.chat.id, ctx.session.lastDescriptionMessageId);
            } catch (error) {
                logger.logError(LOG_CTX_DELETE_DESC, error);
            }
            ctx.session.lastDescriptionMessageId = undefined;
        }
        try {
            const response = await axios.post(api.getDescription(), {
                key: digit,
                square: ctx.session.square,
            });

            const message = response.data.description;

            const sentMessage = await ctx.reply(message, {
                parse_mode: "HTML",
                reply_markup: AppKeyboard.programWithBackKeyboard(),
            });

            ctx.session.lastDescriptionMessageId = sentMessage.message_id;
            ctx.session.messageIds.push(sentMessage.message_id);

            await ctx.answerCallbackQuery();
        } catch (error) {
            logger.logError(LOG_CTX_LOAD_DESC, error);
            await ctx.answerCallbackQuery({ text: MSG_DESCRIPTION_ERROR });
        }
    });



}
