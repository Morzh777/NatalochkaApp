import fs from "fs/promises";
import path from "path";

const LOG_DIR = path.resolve("analytics");
const LOG_PATH = path.join(LOG_DIR, "button_clicks.log");
const WRITE_INTERVAL_MS = 5000; // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫
const MAX_BUFFER_SIZE = 100;    // –ò–ª–∏ –ø—Ä–∏ 100 –∑–∞–ø–∏—Å—è—Ö

let buffer: string[] = [];
let isWriting = false;

// ‚úÖ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
fs.mkdir(LOG_DIR, { recursive: true }).catch(console.error);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
setInterval(flushBuffer, WRITE_INTERVAL_MS);

export function trackButtonClick(callback: string) {
    const entry = {
        time: new Date().toISOString(),
        callback,
    };

    buffer.push(JSON.stringify(entry));

    // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –±–æ–ª—å—à–æ–π ‚Äî —Å—Ä–∞–∑—É –ø–∏—à–µ–º
    if (buffer.length >= MAX_BUFFER_SIZE) flushBuffer().catch(console.error);
}

// –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –≤ —Ñ–∞–π–ª
async function flushBuffer() {
    if (isWriting || buffer.length === 0) return;

    isWriting = true;
    const toWrite = buffer.join("\n") + "\n";
    buffer = [];

    try {
        await fs.appendFile(LOG_PATH, toWrite);
        console.log(`üìù –ó–∞–ø–∏—Å–∞–Ω–æ ${toWrite.split("\n").length - 1} –ª–æ–≥–æ–≤`);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤:", err);
        buffer.unshift(...toWrite.trim().split("\n")); // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
    } finally {
        isWriting = false;
    }
}
