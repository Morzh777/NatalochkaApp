import {InlineKeyboard, Keyboard} from 'grammy';
import {BotContext} from '../bot/BotSettings.js';
import {ComparisonsItem} from '../types/Compatibility.js';

/** ==================== –ö–ù–û–ü–û–ö–ò ==================== **/
const BTN_BACK = '‚óÄÔ∏è –ù–∞–∑–∞–¥';
const BTN_BACK_ALT = '‚óÄÔ∏è';
const BTN_BACK_FAST = '‚èÆÔ∏è';
const BTN_FORWARD = '‚ñ∂Ô∏è';
const BTN_FORWARD_FAST = '‚è≠Ô∏è';
const BTN_BACK_TO_HISTORY = '‚Ü©Ô∏è –ö –∏—Å—Ç–æ—Ä–∏–∏';
const BTN_MENU_ALT = '‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
const BTN_NEW_CALC = 'üÜï –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç';
const BTN_DAY = 'üìÜ –ù–∞—á–Ω—ë–º —Å –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è';
const BTN_MONTH = 'üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü';
const BTN_YEAR = 'üìÜ –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –≥–æ–¥';
const BTN_USERNAME = 'üìù –ò –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫ ‚Äî –∏–º—è';
const BTN_MAIN_CALC = 'üßç‚Äç‚ôÇÔ∏è –ú–∞—Ç—Ä–∏—Ü–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞';
const BTN_MATRIX = 'üß¨ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã ‚≠ê';
const BTN_COMPAT = 'üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å';
const BTN_HISTORY = 'üî¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤';
const BTN_PRIMARY = 'üìå –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã';
const BTN_ADDITIONAL = 'ü™û –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã';
const BTN_USER_SETTINGS = '‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò';
const BTN_USER_PROFILE_CHANGE_NAME = 'üßç‚Äç‚ôÇÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è';
const BTN_USER_PROFILE_CHANGE_DATE = 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É';


const CB_MATRIX = 'matrix_menu';

/** ==================== –ò–ö–û–ù–ö–ò ==================== **/
const ICON_USER = 'üë§ ';
const ICON_PRIMARY = 'üî¢ ';
const ICON_PERCENT = 'üìä ';

/** ==================== –ó–ù–ê–ß–ï–ù–ò–Ø –ö–í–ê–î–†–ê–¢–ê ==================== **/
const TXT_CHAR = '–•–∞—Ä–∞–∫—Ç–µ—Ä'; // 1
const TXT_ENERGY = '–≠–Ω–µ—Ä–≥–∏—è'; // 2
const TXT_INTEREST = '–ò–Ω—Ç–µ—Ä–µ—Å'; // 3
const TXT_HEALTH = '–ó–¥–æ—Ä–æ–≤—å–µ'; // 4
const TXT_LOGIC = '–õ–æ–≥–∏–∫–∞'; //5
const TXT_WORK = '–¢—Ä—É–¥–æ–ª—é–±–∏–µ'; //6
const TXT_LUCK = '–£–¥–∞—á–∞'; //7
const TXT_CARE = '–ó–∞–±–æ—Ç–∞'; //8
const TXT_MEMORY = '–ü–∞–º—è—Ç—å'; //9
const TXT_GOAL = '–¶–µ–ª—å'; //10
const TXT_FAMILY = '–°–µ–º—å—è'; //11
const TXT_STABILITY = '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'; //12
const TXT_SELFESTEEM = '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞'; //13
const TXT_MONEY = '–§–∏–Ω–∞–Ω—Å—ã'; //14
const TXT_TALENT = '–¢–∞–ª–∞–Ω—Ç'; //15
const TXT_SEX = '–°–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å'; //16
const TXT_SPIRIT = '–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å'; //17

/** ==================== CALLBACK –ß–ò–°–õ–ê (–ö–í–ê–î–†–ê–¢–ê) ==================== **/
const CHAR_NUMBER = '1';
const ENERGY_NUMBER = '2';
const INTEREST_NUMBER = '3';
const HEALTH_NUMBER = '4';
const LOGIC_NUMBER = '5';
const WORK_NUMBER = '6';
const LUCK_NUMBER = '7';
const CARE_NUMBER = '8';
const MEMORY_NUMBER = '9';
const GOAL_NUMBER = '10';
const FAMILY_NUMBER = '11';
const STABILITY_NUMBER = '12';
const SELFESTEEM_NUMBER = '13';
const MONEY_NUMBER = '14';
const TALENT_NUMBER = '15';
const SEX_NUMBER = '16';
const SPIRIT_NUMBER = '17';

/** ==================== CALLBACK DATA ==================== **/
const CB_BACK_TO_MODE = 'back_to_mode';
const CB_BACK_TO_HISTORY = 'back_to_history';
const CB_MENU = 'menu';
const CB_NEW_CALC = 'square';
const CB_MAIN_CALC = 'main_calculation';
const CB_COMPAT = 'menu_compatibility';
const CB_COMPAT_PAGINATION = 'compatibility';
const CB_HISTORY = 'history';
const CB_SHOW_SQUARE = 'show_square';
const CB_SHOW_AGGREGATES = 'show_aggregates';
const CB_SHOW_HISTORY_PREFIX = 'show_history';
const CB_HISTORY_PAGE_PREFIX = 'history_page';
const CB_SHOW_COMPATIBILITY_PREFIX = 'show_compatibility';
const CB_COMPATIBILITY_PAGE_PREFIX = 'compatibility_page';
const CB_USER_SETTINGS = 'settings';
const CB_USER_CHANGE_NAME = 'edit_name';
const CB_USER_CHANGE_DATE = 'edit_date';

/** ==================== SESSION STATE ==================== **/
const AWAIT_USERNAME = 'awaiting_username';

interface HistoryItem {
    name: string;
    input_date: string;
}

export class AppKeyboard {
    /** ==================== REPLY-–ö–õ–ê–í–ò–ê–¢–£–†–´ ==================== **/

    public static dayKeyboard(): Keyboard {
        return this.createNumericKeyboard(1, 31, 5);
    }

    public static monthKeyboard(): Keyboard {
        const months = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å',
        ];
        return this.createTextKeyboard(months, 4);
    }

    public static yearKeyboard(): Keyboard {
        const currentYear = new Date().getFullYear();
        return this.createNumericKeyboard(1600, currentYear, 5, true);
    }

    /** ==================== INLINE-–ö–õ–ê–í–ò–ê–¢–£–†–´ ==================== **/
    public static getUserMenuKeyboard: () => InlineKeyboard = () => {
        return new InlineKeyboard()
            .text(BTN_USER_PROFILE_CHANGE_NAME, CB_USER_CHANGE_NAME).row()
            .text(BTN_USER_PROFILE_CHANGE_DATE, CB_USER_CHANGE_DATE).row()
            .text('üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_promo').row()
            .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'delete_profile').row()
            .text(BTN_MENU_ALT, CB_MENU);
    };

    public static getAdminMenuKeyboard: () => InlineKeyboard = () => {
        return new InlineKeyboard()
            .text("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "send_news_admin").row()
            .text(BTN_MENU_ALT, CB_MENU);
    };

    public static squareKeyboard(square: Record<string, string>, openedFromHistory = false): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text(TXT_CHAR, CHAR_NUMBER).text(TXT_HEALTH, HEALTH_NUMBER).text(TXT_LUCK, LUCK_NUMBER).row()
            .text(TXT_ENERGY, ENERGY_NUMBER).text(TXT_LOGIC, LOGIC_NUMBER).text(TXT_CARE, CARE_NUMBER).row()
            .text(TXT_INTEREST, INTEREST_NUMBER).text(TXT_WORK, WORK_NUMBER).text(TXT_MEMORY, MEMORY_NUMBER).row()
            .text(BTN_BACK, CB_BACK_TO_MODE);

        if (openedFromHistory) {
            keyboard.row().text(BTN_BACK_TO_HISTORY, CB_BACK_TO_HISTORY);
        }

        return keyboard;
    }

    public static aggregatesKeyboard(
        square: Record<string, string>,
        openedFromHistory = false,
        hasPremium?: boolean,
    ): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        const buttons = [
            { label: TXT_GOAL, callback: GOAL_NUMBER },
            { label: TXT_FAMILY, callback: FAMILY_NUMBER },
            { label: TXT_STABILITY, callback: STABILITY_NUMBER },
            { label: TXT_SELFESTEEM, callback: SELFESTEEM_NUMBER },
            { label: TXT_MONEY, callback: MONEY_NUMBER },
            { label: TXT_TALENT, callback: TALENT_NUMBER },
            { label: TXT_SEX, callback: SEX_NUMBER },
            { label: TXT_SPIRIT, callback: SPIRIT_NUMBER },
        ];

        for (let i = 0; i < buttons.length; i += 3) {
            const row = buttons.slice(i, i + 3);
            for (const { label, callback } of row) {
                const isActive = hasPremium === true; // üëà –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                const finalLabel = isActive ? label : `${label} ‚≠ê`;
                const finalCallback = isActive ? callback : 'buy_premium';
                keyboard.text(finalLabel, finalCallback);
            }
            keyboard.row();
        }

        keyboard.text(BTN_BACK, CB_BACK_TO_MODE);

        if (openedFromHistory) {
            keyboard.row().text(BTN_BACK_TO_HISTORY, CB_BACK_TO_HISTORY);
        }

        return keyboard;
    }

    public static detailKeyboard({
                                     hasPremium = false,
                                 }: {
        square: any;
        openedFromHistory?: boolean;
        showNewCalc?: boolean;
        isMainCalculation?: boolean;
        hasPremium?: boolean;
    }): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text(BTN_PRIMARY, CB_SHOW_SQUARE).row()
            .text(BTN_ADDITIONAL, CB_SHOW_AGGREGATES).row();

        if (!hasPremium) {
            keyboard.text("üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã", "matrix_compatibility").row();
            keyboard.text("üß¨ –¢–≤–æ—è –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", "matrix_menu").row();
        }

        keyboard
            .text(BTN_NEW_CALC, CB_NEW_CALC).row()
            .text(BTN_HISTORY, CB_HISTORY).row()
            .text(BTN_MENU_ALT, CB_MENU).row();

        return keyboard;
    }

    public static getHistoryKeyboard(
        history: HistoryItem[],
        page: number,
        pageSize: number,
        totalCount: number,
    ): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        history.forEach((item) => {
            keyboard
                .text(
                    `${item.name} ‚Äî ${item.input_date}`,
                    `${CB_SHOW_HISTORY_PREFIX}:${item.input_date}|${item.name}`,
                )
                .row();
        });

        this.addPaginationControls(keyboard, page, totalCount, pageSize, CB_HISTORY);
        keyboard.row().text(BTN_NEW_CALC, CB_NEW_CALC);
        keyboard.row().text(BTN_MENU_ALT, CB_MENU);

        return keyboard;
    }


    public static getCompatibilityKeyboard(
        comparisons: ComparisonsItem[],
        page: number,
        pageSize: number,
        totalCount: number,
        userDestiny?: string,
        hasPremium?: boolean,
    ): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        comparisons.forEach((item) => {
            const callbackData = hasPremium
                ? `${CB_SHOW_COMPATIBILITY_PREFIX}:${item.inputDate}|${item.name}`
                : 'buy_premium'; // üîí —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ø–ª–∞—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

            keyboard.text(
                `${ICON_USER} ${item.name} | ${ICON_PRIMARY} ${item.destiny} | ${ICON_PERCENT} ${item.percentage}%`,
                callbackData
            ).row();
        });

        this.addPaginationControls(keyboard, page, totalCount, pageSize, CB_COMPAT_PAGINATION);

        keyboard.row().text(`‚òÄÔ∏è –¢–≤–æ–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã: ${userDestiny}`, `show_user_destiny:${userDestiny}`).row();

        if (!hasPremium) {
            keyboard.text('üëâ –ë–æ–ª—å—à–µ –æ —Ç–≤–æ–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç—É—Ç', 'matrix_compatibility').row();
        }

        keyboard.row().text(BTN_NEW_CALC, CB_NEW_CALC);
        keyboard.row().text(BTN_MENU_ALT, CB_MENU);

        return keyboard;
    }



    public static getMainMenuKeyboard(): InlineKeyboard {
        return new InlineKeyboard()
            .text(BTN_MAIN_CALC, CB_MAIN_CALC).row()
            .text(BTN_COMPAT, CB_COMPAT).row()
            .text(BTN_MATRIX, CB_MATRIX).row()
            .text('üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ü–∞—Ä—ã ‚≠ê', 'matrix_compatibility').row()
            .text(BTN_USER_SETTINGS, CB_USER_SETTINGS).row()
            .url("üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏", "https://t.me/natalochka_news").row()
            .switchInline('üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ù–∞—Ç–∞–ª–æ—á–∫–æ–π', 'üî• –ó–∞—Ü–µ–Ω–∏ –ù–∞—Ç–∞–ª–æ—á–∫—É ‚Äî —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —á–µ—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏. –û—á–µ–Ω—å –≥–æ–¥–Ω–æ!');
    }

    /** ==================== –ü–†–û–ú–ü–¢–´ ==================== **/

    public static async promptForDay(ctx: BotContext) {
        await this.sendPrompt(ctx, BTN_DAY, this.dayKeyboard());
    }

    public static async promptForMonth(ctx: BotContext) {
        await this.sendPrompt(ctx, BTN_MONTH, this.monthKeyboard());
    }

    public static async promptForYear(ctx: BotContext) {
        await this.sendPrompt(ctx, BTN_YEAR, this.yearKeyboard());
    }

    public static async promptForUsername(ctx: BotContext) {
        ctx.session.state = AWAIT_USERNAME;
        await ctx.reply(BTN_USERNAME, {
            reply_markup: {remove_keyboard: true},
        });
    }

    /** ==================== –ü–†–ò–í–ê–¢–ù–´–ï ==================== **/

    private static async sendPrompt(ctx: BotContext, text: string, keyboard: Keyboard) {
        const msg = await ctx.reply(text, {reply_markup: keyboard});
        ctx.session.botMessageId = msg.message_id;
    }

    private static createNumericKeyboard(start: number, end: number, perRow: number, descending = false): Keyboard {
        const numbers = Array.from({length: end - start + 1}, (_, i) => String(descending ? end - i : start + i));
        return this.createTextKeyboard(numbers, perRow);
    }

    private static createTextKeyboard(items: string[], perRow: number): Keyboard {
        const keyboard = new Keyboard();
        for (let i = 0; i < items.length; i += perRow) {
            keyboard.row(...items.slice(i, i + perRow));
        }
        return keyboard.resized();
    }

    private static addPaginationControls(
        keyboard: InlineKeyboard,
        page: number,
        totalItems: number,
        pageSize: number,
        prefix: string,
    ) {
        const totalPages = Math.ceil(totalItems / pageSize);
        const buttons: { text: string; callback_data: string }[] = [];

        if (page > 0) {
            // –í –Ω–∞—á–∞–ª–æ
            buttons.push({text: BTN_BACK_FAST, callback_data: `${prefix}_page:0`});
            // –ù–∞–∑–∞–¥
            buttons.push({text: BTN_BACK_ALT, callback_data: `${prefix}_page:${page - 1}`});
        }

        if (page < totalPages - 1) {
            // –í–ø–µ—Ä—ë–¥
            buttons.push({text: BTN_FORWARD, callback_data: `${prefix}_page:${page + 1}`});
            // –í –∫–æ–Ω–µ—Ü
            if (page < totalPages - 2) {
                buttons.push({text: BTN_FORWARD_FAST, callback_data: `${prefix}_page:${totalPages - 1}`});
            }
        }

        // –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞
        if (buttons.length > 0) {
            buttons.forEach(btn => keyboard.text(btn.text, btn.callback_data));
            keyboard.row(); // –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        }
    }

    public static getMatrixMenuKeyboard(hasPremium: boolean): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        const buttons = [
            { label: 'üß© –ü—Ä–æ–≥—Ä–∞–º–º—ã', callback: 'open_program_menu' },
            { label: 'üéØ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', callback: 'show_purpose' },
            { label: '‚ù§Ô∏è –í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è', callback: 'show_relationships' },
            { label: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã', callback: 'show_money' },
            { label: 'üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', callback: 'matrix_compatibility', alwaysEnabled: true },
            { label: 'üÜï –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç', callback: 'new_matrix' },
            { label: BTN_HISTORY, callback: 'matrix_history' },
        ];

        for (const { label, callback, alwaysEnabled } of buttons) {
            const finalLabel = hasPremium || alwaysEnabled ? label : `${label} ‚≠ê`;
            const finalCallback = hasPremium || alwaysEnabled ? callback : 'buy_premium';
            keyboard.text(finalLabel, finalCallback).row();
        }

        keyboard.text(BTN_MENU_ALT, 'menu');

        return keyboard;
    }

    public static getProgramsKeyboard(fromHistory = false): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text('üß© –û–±—ã—á–Ω—ã–µ', 'open_programs').row()
            .text('üíÄ –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ', 'open_karmic').row();

        if (fromHistory) {
            keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_matrix_menu');
        } else {
            keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'matrix_menu');
        }

        return keyboard;
    }

    public static getProgramListKeyboard(
        programs: { key: string; title: string; type: '–æ–±—ã—á–Ω–∞—è' | '–∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è' }[],
        prefix = 'show_program',
        backCallback = 'back_to_program_menu',
    ): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        programs.forEach(({key, title, type}) => {
            keyboard.text(`üìå ${key} ${title}`, `${prefix}:${key}|${type}`).row();
        });

        keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', backCallback).row();
        keyboard.text(BTN_MENU_ALT, CB_MENU);

        return keyboard;
    }

    public static backToProgramsKeyboard(): InlineKeyboard {
        return new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'delete_message');
    }


    public static getMatrixHistoryKeyboard(
        history: { input_date: string; name: string }[],
        page: number,
        pageSize: number,
        totalCount: number,
    ): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        history.forEach((item) => {
            keyboard
                .text(`${item.name} ‚Äî ${item.input_date}`, `show_matrix:${item.input_date}|${item.name}`)
                .row();
        });

        // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        const totalPages = Math.ceil(totalCount / pageSize);
        if (totalPages > 1) {
            const navRow: [string, string][] = [];

            if (page > 0) {
                navRow.push(['‚óÄÔ∏è –ù–∞–∑–∞–¥', `matrix_page:${page - 1}`]);
            }

            if (page < totalPages - 1) {
                navRow.push(['–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `matrix_page:${page + 1}`]);
            }

            navRow.forEach(([label, callback]) => keyboard.text(label, callback));
            if (navRow.length > 0) keyboard.row();
        }

        keyboard.text(BTN_MENU_ALT, CB_MENU).row();

        return keyboard;
    }

    public static getPurposeKeyboard(SKY_NUM: number, LAND_NUM: number, DEST_NUM: number, fromHistory = false): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text(`ü™∂ –ß–∏—Å–ª–æ –∑–µ–º–ª–∏`, 'purpose_land').row()
            .text(`üéà –ß–∏—Å–ª–æ –Ω–µ–±–∞`, 'purpose_sky').row()
            .text(`üõ§Ô∏è –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ`, 'purpose_dest').row();

        if (fromHistory) {
            keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_matrix_menu');
        } else {
            keyboard.text('üß¨ –í  –º–µ–Ω—é –º–∞—Ç—Ä–∏—Ü—ã', 'matrix_menu');
        }

        return keyboard;
    }


    public static backToPurposeKeyboard(): InlineKeyboard {
        return new InlineKeyboard().text('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'delete_message');
    }

    public static programWithBackKeyboard(): InlineKeyboard {
        return new InlineKeyboard()
            .text("üîÆ –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—É—Ç", "matrix_menu").row()
            .text("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "delete_message");
    }

    public static detailDestinyKeyboard(): InlineKeyboard {
        return new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_mode');
    }

    public static getRelationshipsKeyboard(fromHistory = false): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text(`üî¢ –ò–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä`, "partner_description").row()
            .text(`üéØ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö`, "relationships_description").row();

        if (fromHistory) {
            keyboard.text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back_to_matrix_menu");
        } else {
            keyboard.text("üß¨ –í  –º–µ–Ω—é –º–∞—Ç—Ä–∏—Ü—ã", "matrix_menu");
        }

        return keyboard;
    }

    public static getMoneyKeyboard(fromHistory = false): InlineKeyboard {
        const keyboard = new InlineKeyboard()
            .text(`üö´ –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∫ –¥–µ–Ω—å–≥–∞–º`, "money_block_description").row()
            .text(`üíº –ü—Ä–∏–∑–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ`, "work_description").row();

        if (fromHistory) {
            keyboard.text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back_to_matrix_menu");
        } else {
            keyboard.text("üß¨ –í  –º–µ–Ω—é –º–∞—Ç—Ä–∏—Ü—ã", "matrix_menu");
        }

        return keyboard;
    }

    public static getMaterialMeaningKeyboard(hasPremium: boolean): InlineKeyboard {
        const keyboard = new InlineKeyboard();

        const buttons = [
            { label: 'üå´Ô∏è –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –ø–∞—Ä–µ', callback: 'compat_atmosphere' },
            { label: 'ü™û –ö–∞–∫ –ø–∞—Ä—É –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ', callback: 'appearance_description' },
            { label: 'üéØ –¶–µ–ª—å –ø–∞—Ä—ã', callback: 'positive_meaning' },
            { label: 'üìå –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä—ã', callback: 'couple_task' },
            { label: 'üíû –ß—Ç–æ –æ–±—å–µ–¥–∏–Ω—è–µ—Ç –ø–∞—Ä—É', callback: 'couple_attraction' },
            { label: 'üí∞ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∞—Ä—ã –∫ –¥–µ–Ω—å–≥–∞–º', callback: 'material_meaning' },
            { label: 'üí∏ –ö–∞–∫ –ø–∞—Ä–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback: 'cache' },
            { label: 'üí∏ –í —á–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–Ω—å–≥–∞–º–∏', callback: 'cache_trouble' },
            { label: 'üÜï –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç', callback: 'new_matrix' },
        ];

        for (const { label, callback } of buttons) {
            const finalLabel = hasPremium ? label : `${label} ‚≠ê`;
            const finalCallback = hasPremium ? callback : 'buy_premium';
            keyboard.text(finalLabel, finalCallback).row();
        }

        keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'matrix_history');
        return keyboard;
    }

    public static afterPaymentKeyboard(): InlineKeyboard {
        return new InlineKeyboard()
            .text("üîÆ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", "matrix_menu").row()
            .text("üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "matrix_compatibility").row()
            .text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu");
    }
}
