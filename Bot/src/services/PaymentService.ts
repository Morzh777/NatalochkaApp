import {Context, InlineKeyboard} from "grammy";
import type {LabeledPrice} from "@grammyjs/types";
import {Logger} from "../utils/Logger.js";
import {API_BASE_URL} from "../config/api.js";
import axios from "axios";

import {BotContext} from "../bot/BotSettings.js";
import {Message} from "grammy/types";
import {AppKeyboard} from "../utils/keyboards.js";

const logger = new Logger("PaymentService");

export class PaymentService {
    static starsPrice = 99;
    static payload = "premium_access";

    static async sendInvoice(ctx: Context) {
        try {
            const chatId = ctx.chat?.id;
            if (!chatId) {
                logger.logError("sendInvoice", "Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω");
                await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
                return;
            }

            const prices: LabeledPrice[] = [
                { label: "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø", amount: this.starsPrice },
            ];

            const description =
                "üí´ –î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º –Ω–∞ 30 –¥–Ω–µ–π\n\n" +
                "‚úîÔ∏è –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã\n" +
                "‚úîÔ∏è –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n" +
                "‚úîÔ∏è –§–∏–Ω–∞–Ω—Å—ã, —Ü–µ–ª–∏, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n" +
                "‚úîÔ∏è –ì–ª—É–±–æ–∫–∏–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã\n" +
                "‚úîÔ∏è –í—Å–µ –±—É–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n" +
                "üí≥ –ö –æ–ø–ª–∞—Ç–µ 99 –∑–≤—ë–∑–¥ (179 —Ä—É–±–ª–µ–π)";

            await ctx.api.sendInvoice(
                chatId,
                "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
                description,
                this.payload,
                "XTR",
                prices,
                {
                    start_parameter: "buy_premium",
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "–û–ø–ª–∞—Ç–∏—Ç—å 99 –∑–≤–µ–∑–¥ (179 —Ä—É–±–ª–µ–π) ", pay: true }],
                            [{ text: "‚Ü©Ô∏è –ù–µ —Å–µ–π—á–∞—Å", callback_data: "delete_message" }]
                        ]
                    }
                }
            );

            logger.log(`üì® –ò–Ω–≤–æ–π—Å –Ω–∞ ${this.starsPrice} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
        } catch (error) {
            logger.logError("sendInvoice", error);
            await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }


    static async handlePreCheckout(ctx: Context) {
        try {
            await ctx.answerPreCheckoutQuery(true);
            logger.log("‚úÖ Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");
        } catch (error) {
            logger.logError("handlePreCheckout", error);
        }
    }

    static async handleSuccessfulPayment(ctx: BotContext): Promise<Message | void> {
        try {
            const payment = ctx.message?.successful_payment;

            if (payment?.invoice_payload === this.payload) {
                const userId = ctx.from?.id?.toString();
                const chargeId = payment.telegram_payment_charge_id;
                const amount = 30;
                const stars = payment.total_amount;
                logger.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: ${stars} –∑–≤—ë–∑–¥`);
                logger.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: userId=${userId}, chargeId=${chargeId}`);

                try {
                    await axios.post(`${API_BASE_URL}/premium/save-payment`, {
                        userId,
                        chargeId,
                        amount
                    });
                    logger.log("üì¶ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ");
                } catch (err: any) {
                    logger.logError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î", err);
                    await ctx.reply("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É.");
                    return;
                }

                const sentMessage = await ctx.reply(
                    `üéâ <b>–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n` +
                    `üîì <b>–¢–µ–±–µ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:</b>\n\n` +
                    `‚Ä¢ <b>–ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã</b> ‚Äî –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ –∑–∞–¥–∞—á\n` +
                    `‚Ä¢ <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚Äî –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ —á–∏—Å–ª—É —Å—É–¥—å–±—ã\n\n` +
                    `üëá –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:`,
                    {
                        parse_mode: "HTML",
                        reply_markup: AppKeyboard.afterPaymentKeyboard(),
                    }
                );
                return sentMessage;
            } else {
                logger.log("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –ø—É—Å—Ç–∞—è –æ–ø–ª–∞—Ç–∞");
            }
        } catch (error) {
            logger.logError("handleSuccessfulPayment", error);
            await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }

    static async refund(ctx: Context, chargeId: string, userId: number) {
        try {
            const botToken = process.env.TG_TOKEN!;
            const url = `https://api.telegram.org/bot${botToken}/refundStarPayment`;

            logger.log(`üîç Refund attempt:
URL: ${url}
charge_id: ${chargeId}
user_id: ${userId}`);

            const response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    telegram_payment_charge_id: chargeId,
                    user_id: userId,
                }),
            });

            const result = await response.json();
            console.log("Refund response:", result);

            if (!result.ok) {
                throw new Error(result.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            }

            logger.log(`üîÅ –£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ charge_id: ${chargeId}`);
            await ctx.reply(`‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω:
<code>${chargeId}</code>`, {
                parse_mode: "HTML",
            });
        } catch (error: any) {
            logger.logError("refund", error);
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ:
<code>${error.message}</code>`, {
                parse_mode: "HTML",
            });
        }
    }
}
export async function handlePromoCode(ctx: BotContext, code: string) {
    const userId = String(ctx.from?.id);
    const normalized = code.trim();

    try {
        const res = await axios.post(`${API_BASE_URL}/premium/${userId}/redeem`, {
            code: normalized,
        });

        const keyboard = new InlineKeyboard().text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu");

        const msg = await ctx.reply(res.data.message || "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", {
            reply_markup: keyboard,
        });

        ctx.session.messageIds = [...(ctx.session.messageIds || []), msg.message_id];
    } catch (error: any) {
        logger.logError("handlePromoCode", error);

        const message = error?.response?.data?.error || "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.";
        const msg = await ctx.reply(`‚ö†Ô∏è ${message}`);
        ctx.session.messageIds = [...(ctx.session.messageIds || []), msg.message_id];
    } finally {
        ctx.session.flow = undefined;
        ctx.session.state = undefined;
    }
}