import { BotContext } from "../bot/BotSettings.js";

export class LoadingService {
    private static readonly full = "‚ñ†";
    private static readonly empty = "‚ñ°";

    private interval?: NodeJS.Timeout;
    private progress = 0;
    private readonly steps: number;
    private readonly ctx: BotContext;
    private messageId: number = 0;

    private constructor(ctx: BotContext, steps: number) {
        this.ctx = ctx;
        this.steps = steps;
    }

    // üîÅ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π create: —Å–Ω–∞—á–∞–ª–∞ reply, –ø–æ—Ç–æ–º start
    static async create(ctx: BotContext, steps = 10): Promise<LoadingService> {
        const instance = new LoadingService(ctx, steps);

        const message = await ctx.reply(
            `‚è≥ –ó–∞–≥—Ä—É–∂–∞—é... [${this.empty.repeat(steps)}] 0%`,
            { parse_mode: "HTML" }
        );

        instance.messageId = message.message_id;
        instance.start(); // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID

        return instance;
    }

    private start() {
        this.interval = setInterval(async () => {
            if (this.progress >= this.steps || !this.messageId) return;

            this.progress++;
            const percent = Math.round((this.progress / this.steps) * 100);
            const bar =
                LoadingService.full.repeat(this.progress) +
                LoadingService.empty.repeat(this.steps - this.progress);

            try {
                await this.ctx.api.editMessageText(
                    this.ctx.chat!.id,
                    this.messageId,
                    `‚è≥ –ó–∞–≥—Ä—É–∂–∞—é... [${bar}] ${percent}%`,
                    { parse_mode: "HTML" }
                );
            } catch {
                await this.stop(); // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            }
        }, 300);
    }

    public async stop(): Promise<void> {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = undefined;
        }

        if (!this.messageId) return;

        try {
            await this.ctx.api.deleteMessage(this.ctx.chat!.id, this.messageId);
        } catch {
            // –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }
    }

    public getMessageId(): number {
        return this.messageId;
    }
}
